"""
Test final du syst√®me Mollier Frayo am√©lior√©
Validation de toutes les fonctionnalit√©s p√©dagogiques
"""

import requests
import json
import time
from datetime import datetime

def test_pedagogical_features():
    """Test des nouvelles fonctionnalit√©s p√©dagogiques"""
    base_url = "http://localhost:5002"
    results = []
    
    print("üß™ Test du syst√®me Mollier Frayo am√©lior√©")
    print("=" * 60)
    
    # Test 1: API diagramme p√©dagogique
    print("üìö Test API diagramme p√©dagogique...")
    try:
        response = requests.get(f"{base_url}/api/mollier_pedagogique", timeout=30)
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                print(f"   ‚úÖ Diagramme p√©dagogique g√©n√©r√© ({len(data.get('diagram_base64', ''))} chars)")
                print(f"   üìä Type: {data.get('metadata', {}).get('type', 'N/A')}")
                results.append(True)
            else:
                print(f"   ‚ùå Erreur API: {data.get('message', 'Inconnue')}")
                results.append(False)
        else:
            print(f"   ‚ùå HTTP {response.status_code}")
            results.append(False)
    except Exception as e:
        print(f"   ‚ùå Erreur connexion: {e}")
        results.append(False)
    
    # Test 2: API explication p√©dagogique
    print("\nüìñ Test API explication p√©dagogique...")
    try:
        response = requests.get(f"{base_url}/api/mollier_explanation", timeout=10)
        if response.status_code == 200:
            data = response.json()
            if 'titre' in data and 'zones_explication' in data:
                zones_count = len(data.get('zones_explication', {}))
                apps_count = len(data.get('applications', []))
                print(f"   ‚úÖ Explication charg√©e ({zones_count} zones, {apps_count} applications)")
                results.append(True)
            else:
                print("   ‚ùå Structure invalide")
                results.append(False)
        else:
            print(f"   ‚ùå HTTP {response.status_code}")
            results.append(False)
    except Exception as e:
        print(f"   ‚ùå Erreur connexion: {e}")
        results.append(False)
    
    # Test 3: G√©n√©ration locale p√©dagogique
    print("\nüè† Test g√©n√©ration locale p√©dagogique...")
    try:
        from mollier_pedagogique import MollierDiagramPedagogique
        generator = MollierDiagramPedagogique()
        path, fig = generator.generate_pedagogical_diagram('test_pedagogique.png')
        
        import os
        if os.path.exists(path):
            file_size = os.path.getsize(path)
            print(f"   ‚úÖ Diagramme local g√©n√©r√© ({file_size} bytes)")
            results.append(True)
        else:
            print("   ‚ùå Fichier non cr√©√©")
            results.append(False)
    except Exception as e:
        print(f"   ‚ùå Erreur g√©n√©ration: {e}")
        results.append(False)
    
    # Test 4: Comparaison des versions
    print("\nüîÑ Test comparaison versions...")
    try:
        from comparaison_mollier import generate_comparison
        comp_path = generate_comparison()
        
        import os
        if os.path.exists(comp_path):
            file_size = os.path.getsize(comp_path)
            print(f"   ‚úÖ Comparaison g√©n√©r√©e ({file_size} bytes)")
            results.append(True)
        else:
            print("   ‚ùå Fichier comparaison non cr√©√©")
            results.append(False)
    except Exception as e:
        print(f"   ‚ùå Erreur comparaison: {e}")
        results.append(False)
    
    # Test 5: Page web am√©lior√©e
    print("\nüåê Test page web am√©lior√©e...")
    try:
        response = requests.get(f"{base_url}/mollier-frayo", timeout=10)
        if response.status_code == 200:
            content = response.text
            if "Version P√©dagogique" in content and "Explication" in content:
                print("   ‚úÖ Page web mise √† jour avec nouvelles fonctionnalit√©s")
                results.append(True)
            else:
                print("   ‚ùå Fonctionnalit√©s manquantes dans la page")
                results.append(False)
        else:
            print(f"   ‚ùå HTTP {response.status_code}")
            results.append(False)
    except Exception as e:
        print(f"   ‚ùå Erreur connexion: {e}")
        results.append(False)
    
    # R√©sum√© final
    print("\n" + "=" * 60)
    passed = sum(results)
    total = len(results)
    success_rate = (passed / total) * 100
    
    print(f"üìä R√©sultats finaux:")
    print(f"   ‚Ä¢ Tests r√©ussis: {passed}/{total} ({success_rate:.1f}%)")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s! Syst√®me p√©dagogique op√©rationnel!")
        status = "SUCCESS"
    elif passed >= total * 0.8:
        print("‚úÖ Syst√®me majoritairement fonctionnel")
        status = "PARTIAL"
    else:
        print("‚ùå Probl√®mes d√©tect√©s - R√©vision n√©cessaire")
        status = "FAILED"
    
    # Sauvegarde du rapport
    report = {
        'test_session': {
            'timestamp': datetime.now().isoformat(),
            'status': status,
            'tests_passed': passed,
            'total_tests': total,
            'success_rate': success_rate
        },
        'features_tested': [
            'Diagramme p√©dagogique simplifi√©',
            'API explication acad√©mique',
            'G√©n√©ration locale optimis√©e',
            'Comparaison des versions',
            'Interface web am√©lior√©e'
        ]
    }
    
    with open('test_pedagogique_final.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"üìÑ Rapport sauvegard√©: test_pedagogique_final.json")
    
    return status == "SUCCESS"

def show_system_summary():
    """Affiche un r√©sum√© du syst√®me complet"""
    print("\n" + "üéØ" * 20)
    print("üìã R√âSUM√â DU SYST√àME MOLLIER FRAYO COMPLET")
    print("üéØ" * 20)
    
    print("\nüìÅ Fichiers cr√©√©s:")
    files = [
        "mollier_diagram_frayo.py - G√©n√©rateur complet",
        "mollier_pedagogique.py - Version acad√©mique simplifi√©e", 
        "mollier_api.py - API version compl√®te",
        "mollier_pedagogique_api.py - API version p√©dagogique",
        "comparaison_mollier.py - Comparaison des versions",
        "templates/mollier_frayo.html - Interface web responsive",
        "MOLLIER_FRAYO_GUIDE.md - Documentation compl√®te"
    ]
    
    for i, file in enumerate(files, 1):
        print(f"   {i}. {file}")
    
    print("\nüåê Endpoints API disponibles:")
    apis = [
        "GET /mollier-frayo - Page web principale",
        "GET /api/mollier_frayo - Diagramme complet",
        "GET /api/mollier_pedagogique - Version p√©dagogique",
        "GET /api/frayo_properties - Propri√©t√©s thermodynamiques",
        "GET /api/mollier_explanation - Explication acad√©mique"
    ]
    
    for api in apis:
        print(f"   ‚Ä¢ {api}")
    
    print("\n‚ú® Fonctionnalit√©s principales:")
    features = [
        "Diagramme h-s professionnel haute r√©solution",
        "Version p√©dagogique style acad√©mique",
        "Zones color√©es (bleu liquide, rouge vapeur, violet m√©lange)",
        "Courbes de saturation et point critique",
        "Cycle frigorifique avec compression/expansion",
        "Donn√©es r√©servoir simul√©es temps r√©el",
        "Interface web responsive avec t√©l√©chargement",
        "Explication p√©dagogique interactive",
        "Comparaison versions multiples",
        "Export PNG haute r√©solution (300 DPI)"
    ]
    
    for feature in features:
        print(f"   ‚úÖ {feature}")
    
    print(f"\nüéâ Syst√®me pr√™t pour la production!")
    print(f"üîó Acc√®s: http://localhost:5002/mollier-frayo")

def main():
    """Fonction principale"""
    print("üßä TEST FINAL - Syst√®me Mollier Frayo P√©dagogique")
    print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Tests complets
    success = test_pedagogical_features()
    
    # R√©sum√© du syst√®me
    if success:
        show_system_summary()
    
    return success

if __name__ == "__main__":
    main()
