#!/usr/bin/env python3

print("üßä Test de d√©marrage du syst√®me...")

try:
    print("üì¶ Import des modules...")
    import flask
    import flask_socketio
    import pandas
    import sklearn
    import pymongo
    import kafka
    print("‚úÖ Tous les modules import√©s avec succ√®s")
    
    print("üê≥ Test de connexion MongoDB...")
    from pymongo import MongoClient
    try:
        client = MongoClient("mongodb://admin:password@localhost:27017/", serverSelectionTimeoutMS=3000)
        client.admin.command('ping')
        print("‚úÖ MongoDB Docker connect√©")
    except:
        try:
            client = MongoClient("mongodb://localhost:27017/", serverSelectionTimeoutMS=3000)
            client.admin.command('ping')
            print("‚úÖ MongoDB local connect√©")
        except Exception as e:
            print(f"‚ö†Ô∏è MongoDB non disponible: {e}")
    
    print("üì° Test de connexion Kafka...")
    from kafka import KafkaProducer
    try:
        producer = KafkaProducer(
            bootstrap_servers='localhost:9092',
            value_serializer=lambda v: str(v).encode('utf-8'),
            request_timeout_ms=3000
        )
        print("‚úÖ Kafka connect√©")
        producer.close()
    except Exception as e:
        print(f"‚ö†Ô∏è Kafka non disponible: {e}")
    
    print("ü§ñ Test du mod√®le ML...")
    import pickle
    import os
    
    model_path = "model_logistic_refrigeration.pkl"
    if os.path.exists(model_path):
        with open(model_path, "rb") as f:
            model = pickle.load(f)
        print("‚úÖ Mod√®le ML charg√©")
    else:
        print(f"‚ö†Ô∏è Mod√®le {model_path} non trouv√©")
    
    print("\nüéØ Tous les tests termin√©s!")
    
except Exception as e:
    print(f"‚ùå Erreur: {e}")
    import traceback
    traceback.print_exc()
