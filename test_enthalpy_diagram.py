#!/usr/bin/env python3
"""
Script de test pour g√©n√©rer des donn√©es de diagramme enthalpique
et envoyer des donn√©es de test vers l'API de pr√©diction
"""

import requests
import json
import random
import time
from datetime import datetime
import numpy as np

# Configuration
API_URL = "http://localhost:5001/api/refrigeration_prediction"
MACHINES = ["FRIGO_001", "FRIGO_002", "FRIGO_003", "FRIGO_004", "FRIGO_005"]

def generate_refrigeration_data(machine_id, normal_operation=True):
    """
    G√©n√®re des donn√©es r√©alistes pour une installation frigorifique
    
    Args:
        machine_id: Identifiant de la machine
        normal_operation: True pour fonctionnement normal, False pour d√©faillance
    """
    
    if normal_operation:
        # Conditions normales de fonctionnement
        base_data = {
            "temp_evaporator": np.random.normal(-12, 2),    # -8 √† -16¬∞C
            "temp_condenser": np.random.normal(42, 3),      # 35 √† 50¬∞C
            "pressure_high": np.random.normal(13, 1),       # 11 √† 15 bar
            "pressure_low": np.random.normal(2.2, 0.3),     # 1.5 √† 3 bar
            "superheat": np.random.normal(8, 1.5),          # 5 √† 12¬∞C
            "subcooling": np.random.normal(5, 1),           # 3 √† 8¬∞C
            "compressor_current": np.random.normal(8.5, 0.8), # 7 √† 10A
            "vibration": np.random.normal(0.025, 0.01)      # 0.01 √† 0.04g
        }
    else:
        # Conditions de d√©faillance
        base_data = {
            "temp_evaporator": np.random.normal(-8, 2),     # Plus √©lev√©e
            "temp_condenser": np.random.normal(48, 4),      # Plus √©lev√©e
            "pressure_high": np.random.normal(15, 1.5),     # Plus √©lev√©e
            "pressure_low": np.random.normal(1.8, 0.3),     # Plus basse
            "superheat": np.random.normal(12, 3),           # Plus √©lev√©e
            "subcooling": np.random.normal(3, 1),           # Plus basse
            "compressor_current": np.random.normal(10, 1.2), # Plus √©lev√©
            "vibration": np.random.normal(0.045, 0.015)     # Plus √©lev√©e
        }
    
    # Ajouter des contraintes physiques r√©alistes
    base_data["temp_evaporator"] = max(-20, min(-5, base_data["temp_evaporator"]))
    base_data["temp_condenser"] = max(30, min(60, base_data["temp_condenser"]))
    base_data["pressure_high"] = max(8, min(20, base_data["pressure_high"]))
    base_data["pressure_low"] = max(1, min(4, base_data["pressure_low"]))
    base_data["superheat"] = max(2, min(20, base_data["superheat"]))
    base_data["subcooling"] = max(1, min(10, base_data["subcooling"]))
    base_data["compressor_current"] = max(5, min(15, base_data["compressor_current"]))
    base_data["vibration"] = max(0.005, min(0.1, base_data["vibration"]))
    
    # Ajouter les m√©tadonn√©es
    base_data["machine_id"] = machine_id
    base_data["timestamp"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    return base_data

def send_prediction_data(data):
    """Envoie les donn√©es vers l'API de pr√©diction"""
    try:
        response = requests.post(API_URL, json=data, timeout=10)
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ {data['machine_id']}: Pr√©diction={result['prediction']}, "
                  f"Probabilit√©={result['probability']:.1%}, "
                  f"Alertes={result['alerts_generated']}")
            return True
        else:
            print(f"‚ùå Erreur API: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur envoi donn√©es: {e}")
        return False

def generate_scenario_data():
    """G√©n√®re des donn√©es pour diff√©rents sc√©narios"""
    scenarios = [
        {
            "name": "Fonctionnement Normal",
            "machines": MACHINES[:3],
            "normal": True,
            "description": "Conditions optimales de fonctionnement"
        },
        {
            "name": "Surcharge Thermique",
            "machines": [MACHINES[3]],
            "normal": False,
            "description": "Temp√©rature condenseur √©lev√©e"
        },
        {
            "name": "Fuite Frigorig√®ne",
            "machines": [MACHINES[4]],
            "normal": False,
            "description": "Pression basse, surchauffe √©lev√©e"
        }
    ]
    
    print("üßä G√©n√©ration de donn√©es de test pour installations frigorifiques")
    print("=" * 70)
    
    for scenario in scenarios:
        print(f"\nüìä Sc√©nario: {scenario['name']}")
        print(f"üìù Description: {scenario['description']}")
        print("-" * 50)
        
        for machine in scenario['machines']:
            data = generate_refrigeration_data(machine, scenario['normal'])
            
            # Personnaliser selon le sc√©nario
            if scenario['name'] == "Surcharge Thermique":
                data['temp_condenser'] = np.random.uniform(52, 58)
                data['pressure_high'] = np.random.uniform(16, 18)
                data['compressor_current'] = np.random.uniform(11, 13)
            elif scenario['name'] == "Fuite Frigorig√®ne":
                data['pressure_low'] = np.random.uniform(1.0, 1.4)
                data['superheat'] = np.random.uniform(15, 22)
                data['subcooling'] = np.random.uniform(1, 3)
                data['temp_evaporator'] = np.random.uniform(-6, -4)
            
            # Afficher les donn√©es avant envoi
            print(f"üîß Machine {machine}:")
            print(f"   T¬∞ √©vaporateur: {data['temp_evaporator']:.1f}¬∞C")
            print(f"   T¬∞ condenseur: {data['temp_condenser']:.1f}¬∞C")
            print(f"   Pression HP: {data['pressure_high']:.1f} bar")
            print(f"   Pression BP: {data['pressure_low']:.1f} bar")
            print(f"   Surchauffe: {data['superheat']:.1f}¬∞C")
            print(f"   Sous-refroidissement: {data['subcooling']:.1f}¬∞C")
            print(f"   Courant compresseur: {data['compressor_current']:.1f}A")
            print(f"   Vibrations: {data['vibration']:.3f}g")
            
            send_prediction_data(data)
            time.sleep(1)  # Pause entre les envois

def continuous_monitoring():
    """Simulation de surveillance continue"""
    print("\nüîÑ D√©marrage de la surveillance continue...")
    print("Appuyez sur Ctrl+C pour arr√™ter")
    
    try:
        while True:
            # Choisir une machine al√©atoire
            machine = random.choice(MACHINES)
            
            # 80% de chance de fonctionnement normal
            is_normal = random.random() < 0.8
            
            data = generate_refrigeration_data(machine, is_normal)
            
            # Ajouter des variations temporelles r√©alistes
            hour = datetime.now().hour
            if 6 <= hour <= 18:  # Journ√©e - plus de charge
                data['temp_evaporator'] += random.uniform(-1, 1)
                data['temp_condenser'] += random.uniform(2, 5)
                data['compressor_current'] += random.uniform(0.5, 1.5)
            else:  # Nuit - moins de charge
                data['temp_evaporator'] -= random.uniform(0, 2)
                data['temp_condenser'] -= random.uniform(1, 3)
                data['compressor_current'] -= random.uniform(0.2, 0.8)
            
            send_prediction_data(data)
            
            # Pause entre 5 et 15 secondes
            time.sleep(random.uniform(5, 15))
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Arr√™t de la surveillance")

def test_temperature_analysis():
    """Test de l'API d'analyse des temp√©ratures"""
    print("\nüå°Ô∏è Test de l'analyse des temp√©ratures")
    print("-" * 40)
    
    test_cases = [
        {"ambient_temperature": 25, "cooling_load": 100, "description": "Conditions standard"},
        {"ambient_temperature": 35, "cooling_load": 120, "description": "Canicule - surcharge"},
        {"ambient_temperature": 15, "cooling_load": 60, "description": "Hiver - charge r√©duite"},
        {"ambient_temperature": 28, "cooling_load": 80, "description": "√ât√© mod√©r√©"}
    ]
    
    for test_case in test_cases:
        print(f"\nüìã Test: {test_case['description']}")
        try:
            response = requests.post(
                "http://localhost:5001/api/temperature_analysis",
                json=test_case,
                timeout=10
            )
            if response.status_code == 200:
                result = response.json()
                analysis = result['analysis']
                print(f"‚úÖ T¬∞ √©vaporateur optimale: {analysis['optimal_conditions']['evaporator_temp']:.1f}¬∞C")
                print(f"‚úÖ T¬∞ condenseur optimale: {analysis['optimal_conditions']['condenser_temp']:.1f}¬∞C")
                print(f"üìä Recommandations: {len(analysis['recommendations'])}")
            else:
                print(f"‚ùå Erreur API: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erreur test: {e}")

def main():
    """Fonction principale"""
    print("üßä TESTEUR DIAGRAMME ENTHALPIQUE - INSTALLATIONS FRIGORIFIQUES")
    print("=" * 70)
    
    while True:
        print("\nüìã Options disponibles:")
        print("1. G√©n√©rer des donn√©es de sc√©narios")
        print("2. Surveillance continue")
        print("3. Test analyse des temp√©ratures")
        print("4. Quitter")
        
        choice = input("\nüîç Choisissez une option (1-4): ").strip()
        
        if choice == "1":
            generate_scenario_data()
        elif choice == "2":
            continuous_monitoring()
        elif choice == "3":
            test_temperature_analysis()
        elif choice == "4":
            print("üëã Au revoir!")
            break
        else:
            print("‚ùå Option invalide")

if __name__ == "__main__":
    main()
